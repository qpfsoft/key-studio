<?php
return [
    'modules'   => [
        'cg'    => [
            'path'  => QPF::$app->getQpfsoftPath() . '/qpf-cg',
        ],
    ],
    
    /* [模块] */
    'defaultModule'    => 'index', // 默认模块
    'defaultController' => 'index', // 默认控制器名
    'defaultAction' => 'index', // 默认操作名
    
    /* [路由] */ 
    'onRoute'       => true, // 是否启用路由
    'strictRoute'   => false, // 严格路由模式, 请求必须匹配路由, 否则异常. (需启动路由)
    'routeCache'    => true, // 是否路由解析加速缓存
    
    /* 严格模式
     * ----------------------------
     * - true : 开启后请求路线, 限定格式`/模块名/控制器名/操作名`,
     * 如果模块不存在, 将直接404;
     * - false : 若访问的模块名不存在, 将模块名当作控制器名, 并重定向
     * 到默认模块来执行该控制器的操作;
     * 
     * 非严格模式的应用场景: 
     * 请求路线 `/控制器名/操作名`, 可省略模块名, 自定定位到默认模块!
     */
    'strictMode'    => true,
    
    /* 应用访问控制
     *
     * 权重值越高, 优先检查, 若匹配, 将不再检查其它!
     *
     * 即
     * - 匹配到域名绑定应用, 将不再检查别名;
     * - 匹配到应用别名, 将不再检查是否禁止访问;
     * - 匹配到禁止访问应用, 将抛出404页面!
     *
     * 注
     * - 路由匹配, 优先于该访问控制流程
     * - 若以上匹配到的应用, 并不真实存在, 将访问默认模块!
     * */
    
    /* 绑定应用到指定域名, 权重3
     * --------------------------
     * 格式 `域名` => '应用名称', 不推荐完整域名, 移植性差!
     * ```
     * 'api.x.com' => 'api', // 完整域名
     * 'api' => 'api', // 子域名
     * 'user.api' => 'api', // 三级子域名
     * ```
     */
    'appDomain' => [
        'api'   => 'api',
        'free.api'   => 'api',
    ],
    // 应用别名, 权重2
    'appAlias' => [
        'login' => 'admin',
    ],
    // 允许URL访问的应用, 权重1
    'appAllow' => [
    ],
    // 禁止URL访问的应用, 权重1
    'appDeny'  => [
    ],
];